generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  role      String   @default("viewer") // admin | editor | viewer
  createdAt DateTime @default(now())
  files     File[]
  folders   Folder[]
  permissions FilePermission[] 
}

model File {
  id        Int      @id @default(autoincrement())
  filename  String
  filepath  String
  mimetype  String
  size      Int
  createdAt DateTime @default(now())
  folder    Folder?  @relation(fields: [folderId], references: [id])
  folderId  Int?
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  shareLinks ShareLink[]
  permissions FilePermission[]
  thumbnailPath String?

  textExtract String? // full extracted text (pdf/images ->text)
  tags      String[] @default([]) // Ai generated tags
  category  String?   // Ai generated category (e.g. "Resume", "invoice")
  
}

model FilePermission {
  id        Int     @id @default(autoincrement())
  file      File    @relation(fields: [fileId], references: [id])
  fileId    Int     
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  permission  String  // "view" | "download" | "edit"
  createdAt DateTime @default(now())

  @@unique([fileId, userId])
}

model Folder {
  id        Int      @id @default(autoincrement())
  name      String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  parent    Folder?  @relation("FolderParent", fields: [parentId], references: [id])
  parentId  Int?      // For nesting
  children  Folder[] @relation("FolderParent")
  files     File[]
}

model ShareLink {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  file      File     @relation(fields: [fileId], references: [id])
  fileId    Int
  createdAt DateTime @default(now())  
}